//half adder module for 4 bit full adder
module half_adder(a,b,c,sum,cout);
    input a,b,c;
    output cout,sum;
	 assign sum=c^a^b;
	 assign cout=a&&b||b&&c||c&&a;
endmodule


//Verilog module for Full adder
module full_adder(x,y,cin,z,cout);
   input [3:0]x;
	 input [3:0]y;
	 input cin;
   output [3:0]z;
	 output cout;
   wire [3:1] carry;
   //call module half adder for each bit addition
	 half_adder fa0(x[0],y[0],cin,z[0],carry[1]);
	 half_adder fa1(x[1],y[1],carry[1],z[1],carry[2]);
	 half_adder fa2(x[2],y[2],carry[2],z[2],carry[3]);
	 half_adder fa3(x[3],y[3],carry[3],z[3],cout);
endmodule



//Verilog code for test bech simulation of 4 bit adder
module full_adder_tb_v;
	// Inputs
	reg [3:0] x;
	reg [3:0] y;
	reg cin;
	// Outputs
	wire [3:0] z;
	wire cout;
	wire [4:0] expected_result;
	wire [4:0] actual_result;
	full_adder uut (x, y, cin, z, cout);
	initial begin
		x = 0;
		y = 0;
		cin = 0;
		#10 x=4;y=4;cin=1'b0;
		#10 x=5;y=10;cin=1'b0;
		#10 x=10;y=7;cin=1'b0;
		#10 x=0;y=0;cin=0;
		end
		assign expected_result = x+y+cin;
		assign actual_result = {cout,z};
		
		initial begin 
		if (actual_result!==expected_result)
		$monitor($time,"x=%d,y=%d,cin=%b,expected_result=%d,actual_result=%d,not correct",x,y,cin,expected_result,actual_result);
		else
		$monitor($time,"x=%d,y=%d,cin=%b,expected_result=%d,actual_result=%d,correct",x,y,cin,expected_result,actual_result);
	   end      
endmodule

